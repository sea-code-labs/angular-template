image: alpine/git:latest

pipelines:
  default:
    - step:
        name: Validate Branch and Commits
        script:
          - echo "Validating branch name and commit count..."
          - current_branch=$(git rev-parse --abbrev-ref HEAD)
          - target_branch=${BITBUCKET_PR_DESTINATION:-$current_branch}
          - if [[ -z "$BITBUCKET_PR_DESTINATION" || "$target_branch" == "main" || "$target_branch" == "develop" ]]; then
            echo "Not validating branch name because it's a PR to 'main' or 'develop' or not a PR.";
            else
            if [[ ! "$current_branch" =~ ^feature-.* ]]; then
            echo "Branch name must start with 'feature-'.";
            exit 1;
            fi
            fi

    - step:
        name: Check PR Source for Main
        script:
          - echo "Checking PR source branch..."
          - if [ -n "$BITBUCKET_PR_DESTINATION" ]; then
            echo "PR destination is set to $BITBUCKET_PR_DESTINATION"
            if [ "$BITBUCKET_PR_DESTINATION" == "main" ]; then
            echo "PR targets 'main'. Verifying source branch...";
            if [ "$BITBUCKET_PR_SOURCE" != "develop" ]; then
            echo "Error PR to 'main' must come from 'develop'. Current source branch is $BITBUCKET_PR_SOURCE.";
            exit 1;
            else
            echo "PR source branch is 'develop'. Check passed.";
            fi
            else
            echo "PR does not target 'main', skipping source branch check.";
            fi
            else
            echo "Not in a PR context, skipping source branch check.";
            fi

    - step:
        name: Clean Up Merged Feature Branches
        script:
          - echo "Fetching all branches..."
          - git fetch --all
          - if [ "$BITBUCKET_PR_DESTINATION" == "develop" ]; then
            echo "PR is targeting 'develop'. Proceeding with branch cleanup...";
            merged_branches=$(git branch -r --merged origin/develop | grep -v '\->' | grep -E 'origin/feature-.*');
            echo "$merged_branches" | while read -r branch; do
            if [[ "$branch" =~ ^origin/feature-.* ]]; then
            echo "Deleting merged branch ${branch#origin/}";
            git push origin --delete "${branch#origin/}";
            fi
            done;
            else
            echo "Not a merge to 'develop', skipping branch cleanup.";
            fi


    - step:
        name: Sync GitHub Mirror
        clone:
          enabled: false
        script:
          - echo "Cloning Bitbucket repository..."
          - git clone --bare git@bitbucket.org:sea-code-labs/angular-template.git
          - cd angular-template.git
          - echo "Pushing to GitHub mirror..."
          - git push --mirror git@github.com:sea-code-labs/angular-template.git
