image: alpine/git:latest

pipelines:
  default:
    - step:
        name: Validate Branch and Commits
        script:
          - echo "Validating branch name and commit count..."
          - current_branch=$(git rev-parse --abbrev-ref HEAD)
          - target_branch=${BITBUCKET_PR_DESTINATION:-$current_branch}
          - if [[ -z "$BITBUCKET_PR_DESTINATION" || "$target_branch" == "main" || "$target_branch" == "develop" ]]; then
            echo "Not validating branch name because it's a PR to 'main' or 'develop' or not a PR.";
            else
            if [[ ! "$current_branch" =~ ^feature-.* ]]; then
            echo "Branch name must start with 'feature-'.";
            exit 1;
            fi
            fi

    - step:
        name: Check PR Source for Main
        script:
          - echo "Checking if the pull request is from 'develop' branch..."
          - echo "BITBUCKET_PR_DESTINATION -> $BITBUCKET_PR_DESTINATION"
          - echo "BITBUCKET_PR_SOURCE -> $BITBUCKET_PR_SOURCE"
          - if [ -n "$BITBUCKET_PR_DESTINATION" ]; then
            echo "Running in a PR context. Destination branch is $BITBUCKET_PR_DESTINATION.";
            if [ "$BITBUCKET_PR_DESTINATION" == "main" ]; then
            echo "This is a PR to 'main'. Checking source branch...";
            git fetch --all;
            source_branch=$BITBUCKET_PR_SOURCE;
            if [ "$source_branch" != "develop" ]; then
            echo "Pull request to 'main' must come from 'develop' branch. Source branch is $source_branch.";
            exit 1;
            else
            echo "Source branch is 'develop', PR check passed.";
            fi
            else
            echo "Destination branch is not 'main', skipping check.";
            fi
            else
            echo "Not in a PR context, skipping check.";
            fi

    - step:
        name: Clean Up Branches
        script:
          - echo "Fetching all branches..."
          - git fetch --all
          - echo "Cleaning up merged branches..."
          - merged_branches=$(git branch -r --merged origin/develop | grep -v '\->' | grep -v 'develop$')
          - echo "$merged_branches" | while read -r branch; do
            if [[ "$branch" != "origin/develop" ]]; then
            git push origin --delete "${branch#origin/}"
            fi
            done

    - step:
        name: Sync GitHub Mirror
        clone:
          enabled: false
        script:
          - echo "Cloning Bitbucket repository..."
          - git clone --bare git@bitbucket.org:sea-code-labs/angular-template.git
          - cd angular-template.git
          - echo "Pushing to GitHub mirror..."
          - git push --mirror git@github.com:sea-code-labs/angular-template.git
